
POM
<?xml version="1.0" encoding="UTF-8"?> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"> 	<modelVersion>4.0.0</modelVersion> 	<groupId>mx.isban.formacionplataformadigital</groupId> 	<artifactId>mongo-service</artifactId> 	<version>1.0.2-SNAPSHOT</version> 	<packaging>jar</packaging> 	<name>Microservicio de clientes</name> 	<description>Ejemplo de microservicio apegado a estandares</description> 	<parent> 		<groupId>org.springframework.boot</groupId> 		<artifactId>spring-boot-starter-parent</artifactId> 		<version>1.5.8.RELEASE</version> 		<relativePath /> <!-- lookup parent from repository --> 	</parent> 	<properties> 		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> 		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> 		<maven.compiler.source>1.8</maven.compiler.source> 		<maven.compiler.target>1.8</maven.compiler.target> 		<java.version>1.8</java.version> 	</properties> 	<dependencies> 		<dependency> 			<groupId>org.springframework.boot</groupId> 			<artifactId>spring-boot-starter-web</artifactId> 		</dependency> 								<!-- Librerias habilitadoras de componente Swagger swagger-ui.html --> 		<dependency> 			<groupId>io.springfox</groupId> 			<artifactId>springfox-swagger2</artifactId> 			<version>2.4.0</version> 		</dependency> 		<dependency> 			<groupId>io.springfox</groupId> 			<artifactId>springfox-swagger-ui</artifactId> 			<version>2.4.0</version> 		</dependency> 						<dependency> 			<groupId>org.springframework.boot</groupId> 			<artifactId>spring-boot-starter-test</artifactId> 			<scope>test</scope> 		</dependency> 						       <!-- Para conexion a BD --> 		<dependency> 			<groupId>org.springframework.data</groupId> 			<artifactId>spring-data-mongodb</artifactId> 		</dependency> 		<dependency> 			<groupId>org.mongodb</groupId> 			<artifactId>mongo-java-driver</artifactId> 		</dependency> 			   						<!-- Librerias para inyeccion de configuracion y fail fast--> 		<dependency> 			<groupId>org.springframework.cloud</groupId> 			<artifactId>spring-cloud-starter-config</artifactId> 		</dependency> 		<dependency>             <groupId>org.springframework.retry</groupId>             <artifactId>spring-retry</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-aop</artifactId>        </dependency> 	   	           <!-- Para trazabilidad entre microservicios --> 	   <dependency> 		    <groupId>org.springframework.cloud</groupId> 		    <artifactId>spring-cloud-starter-sleuth</artifactId> 		</dependency>         	</dependencies> 		<dependencyManagement> 		<dependencies> 			<dependency> 				<groupId>org.springframework.cloud</groupId> 				<artifactId>spring-cloud-dependencies</artifactId> 				<version>Dalston.SR3</version> 				<type>pom</type> 				<scope>import</scope> 			</dependency> 		</dependencies> 	</dependencyManagement> 		<build> 		<plugins> 			<plugin> 				<groupId>org.springframework.boot</groupId> 				<artifactId>spring-boot-maven-plugin</artifactId> 			</plugin> 		</plugins> 	</build> 		</project>

 mongo-service src main resources bootstrap.yml 
      spring:   application:     name: clientes-service   cloud:     config:       #Habilita que valide si existe servicio de configuracion para poder arrancar la aplicacion       failFast: false       retry:       #Intervalo de tiempo inicial entre cada repeticion         initialInterval: 6000       #Incremento exponencial del tiempo de intervalo inicial         multiplier: 1.5       #Tiempo maximo al que puede crecer el intervalo         maxInterval: 30000       enable: true       uri: http://config-service-git-mxpocasw1-dev.appls.cto2.paas.gsnetcloud.corp/       name: ${spring.application.name}       label: master       profile: dev       allow-override: true   data:     mongodb:       host: mongodb       port: 27017       database: mongodb       username: usuario       password: pass logging:   level:     mx:       isban:         formacionplataformadigital:           clientes: DEBUG

 mongo-service .. controller ClientesController.java 
     package mx.isban.formacionplataformadigital.clientes.controller; import java.net.URI; import java.util.List; import javax.validation.Valid; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.servlet.support.ServletUriComponentsBuilder; import org.springframework.web.util.UriComponentsBuilder; import mx.isban.formacionplataformadigital.clientes.exception.ClienteNoEncontradoException; import mx.isban.formacionplataformadigital.clientes.exception.ErrorEnum; import mx.isban.formacionplataformadigital.clientes.exception.model.DefaultError; import mx.isban.formacionplataformadigital.clientes.exception.model.DefaultErrorList; import mx.isban.formacionplataformadigital.clientes.model.Cliente; import mx.isban.formacionplataformadigital.clientes.service.IClientesService; @RestController @RequestMapping("/clientes") public class ClientesController { 		@Autowired 	private IClientesService clientesService; 		/** La Constante logger. Obtiene el Logger de la clase */     private static final Logger logger = LoggerFactory.getLogger(ClientesController.class); 	    @GetMapping(value = "/", produces = MediaType.APPLICATION_JSON_UTF8_VALUE )     public ResponseEntity<?> getClientesTodos() {         logger.info("Consulta clientes");         List<Cliente> clientes;         		try { 			clientes = clientesService.getClientesTodos(); 	        return new ResponseEntity<List<Cliente>>(clientes, HttpStatus.OK); 		} catch (ClienteNoEncontradoException e) { 			 logger.error("Clientes no encontrados"); 	            return new ResponseEntity<Object>( 	            		new DefaultErrorList(new DefaultError(ErrorEnum.CTE_NO_ENCONTRADO)), HttpStatus.NOT_FOUND); 		} 		    }         @PostMapping(value = "/", 					consumes = MediaType.APPLICATION_JSON_UTF8_VALUE, 					produces = MediaType.APPLICATION_JSON_UTF8_VALUE )     public ResponseEntity<?> crearCuenta(@Valid @RequestBody Cliente cte, UriComponentsBuilder ucBuilder) {         logger.info("Creando cliente : {}", cte);                 long cteId = clientesService.guardarCliente(cte); 		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path( 				"/{id}").buildAndExpand(cteId).toUri(); 				return ResponseEntity.created(location).build(); 			            }     }

mongo-service .. dao IClientesRepository.java 
    package mx.isban.formacionplataformadigital.clientes.dao; import org.springframework.data.mongodb.repository.MongoRepository; import mx.isban.formacionplataformadigital.clientes.model.Cliente; public interface IClientesRepository extends MongoRepository<Cliente, String> { 	}


mongo-service .. model DefaultErrorList.java 
    package mx.isban.formacionplataformadigital.clientes.exception.model; import java.io.Serializable; import java.util.ArrayList; import java.util.List; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.ObjectMapper; /**  * La clase DefaultErrorResponseBean, usada para enviar la respuesta en caso de error durante la ejecucion del servicio.  *  * @author Transformacion Digital  */ public class DefaultErrorList implements Serializable { 	/** Variable para serializar la clase. */ 	private static final long serialVersionUID = 1L; 	/** La variable errors. */ 	private List<DefaultError> errors; 		/** 	 * Constructor de la clase. 	 * Un ejemplo de implementacion es agregar la siguiente linea: 	 * 	 * 		DefaultErrorResponseBean errorResp = new DefaultErrorResponseBean(new ErrorBean(ErrorEnum.FORBIDDEN)); 	 * 	 * En donde el objeto ErrorEnum es la clase con la serie de codigos de errores (Puede utilizarse esa misma clase generica, o una implementacion propia) 	 */ 	public DefaultErrorList(final DefaultError errorBean){ 		this.add(errorBean); 	} 	/** 	 * Obtiene el valor de la variable errors. 	 * 	 * @return el errors 	 */ 	public List<DefaultError> getErrors() { 		return errors; 	} 	/** 	 * Coloca el valor de errors. 	 * 	 * @param errors 	 *            es el nuevo valor de errors 	 */ 	public void setErrors(List<DefaultError> errors) { 		this.errors = errors; 	} 	/** 	 * Adds the. 	 * 	 * @param errorBean 	 *            el parametro error bean 	 */ 	public void add(final DefaultError errorBean) { 		if (this.errors == null || this.errors.isEmpty()) { 			this.errors = new ArrayList<>(); 		} 		this.errors.add(errorBean); 	} 		/** 	 * @return El json en string del objeto completo 	 * @throws JsonProcessingException Cuando existe error en el parseo 	 */ 	public String toJsonString() throws JsonProcessingException{ 		ObjectMapper objectMapper= new ObjectMapper(); 		return objectMapper.writeValueAsString(this); 	} }

mongo-service .. model DefaultError.java  
    package mx.isban.formacionplataformadigital.clientes.exception.model; import java.io.Serializable; import mx.isban.formacionplataformadigital.clientes.exception.ErrorEnum; /**  * La clase ErrorBean, usada para indicar los errores que sucedieron durante la ejecucion.  * @author Transformacion Digital  */ public class DefaultError implements Serializable {     /** Variable para serializar la clase. */     private static final long serialVersionUID = 1L; 	/** La variable code. */     private String code;         /** La variable message. */     private String message;     /** La variable level. */     private String level;     /** La variable description. */     private String description;         /** La variable more info. */     private String moreInfo;     /**      * @param code Un codigo de error unico, el cual pueda ser identificado y localizado para mas detalles. Debe ser human readable, por tanto no deberia ser un codigo numerico, sino alfanumerico.      * @param message Un mensaje de error claro: Por consideraciones de seguridad estos mensajes de error no deben contener informacion interna que pudiera implicar un riesgo a la seguridad e integridad.      * @param level  Un nivel de error: info, warning, error.      * @param description Una descripcion detallada.      * @param moreInfo Un link a la documentacion del codigo de error.      */     public DefaultError(String code, String message, String level,     		String description, String moreInfo) { 		this.code = code; 		this.message = message; 		this.level = level; 		this.description = description; 		this.moreInfo = moreInfo; 	}     /**      * @param errorEnum      */     public DefaultError(ErrorEnum errorEnum) { 		this.code = errorEnum.getCode(); 		this.message = errorEnum.getMessage(); 		this.level = errorEnum.getLevel(); 		this.description = errorEnum.getDescription(); 		this.moreInfo = errorEnum.getMoreInfo(); 	}     /**      * Obtiene el valor de la variable code.      *      * @return el code      */     public String getCode() {         return code;     }     /**      * Coloca el valor de code.      *      * @param code es el nuevo valor de code      */     public void setCode(String code) {         this.code = code;     }     /**      * Obtiene el valor de la variable message.      *      * @return el message      */     public String getMessage() {         return message;     }     /**      * Coloca el valor de message.      *      * @param message es el nuevo valor de message      */     public void setMessage(String message) {         this.message = message;     }     /**      * Obtiene el valor de la variable nivel.      *      * @return el level      */     public String getLevel() {         return level;     }     /**      * Coloca el valor de level.      *      * @param level es el nuevo valor del nivel      */     public void setLevel(String level) {         this.level = level;     }     /**      * Obtiene el valor de la variable description.      *      * @return el description      */     public String getDescription() {         return description;     }     /**      * Coloca el valor de description.      *      * @param description es el nuevo valor de description      */     public void setDescription(String description) {         this.description = description;     }     /**      * Obtiene el valor de la variable more info.      *      * @return el more info      */     public String getMoreInfo() {         return moreInfo;     }     /**      * Coloca el valor de more info.      *      * @param moreInfo es el nuevo valor de more info      */     public void setMoreInfo(String moreInfo) {         this.moreInfo = moreInfo;     } }

mongo-service .. exception ClienteNoEncontradoException.java 
    package mx.isban.formacionplataformadigital.clientes.exception; /**  * Clase del tipo exception de negocio  * @author Transformacion Digital  */ public class ClienteNoEncontradoException extends Exception {     private static final long serialVersionUID = 1303454450535514738L;         /**      * Constructor      * @param message Mensaje de error      */     public ClienteNoEncontradoException(String message) {         super(message);     }         /**      * Constructor      * @param message Mensaje de error      * @param causa Causa completa del error      */     public ClienteNoEncontradoException(String message, Throwable causa) {         super(message, causa);     }         /**      * Constructor que la interfaz del enumerador de error      * @param errorEnum Interfaz de enumerador de error      */     public ClienteNoEncontradoException(ErrorEnum errorEnum) {         super(errorEnum.getMessage());     }             /**      * Constructor que la interfaz del enumerador de error      * @param errorEnum Interfaz de enumerador de error      * @param causa Causa completa del error      */     public ClienteNoEncontradoException(ErrorEnum errorEnum, Throwable causa) {         super(errorEnum.getMessage(), causa);     }     }

mongo-service .. exception ErrorEnum.java 
    package mx.isban.formacionplataformadigital.clientes.exception; /**  * The Enum ErrorEnum.  * @author Transformacion Digital  */ public enum ErrorEnum { 	CTE_GENERICO("CTES.000", "Error generico", "Error generico de clientes", "Error", ""), 	CTE_REQUEST("CTES.001", "Parametros invalidos", "Parametros invalidos de consumo", "Error", ""), 		CTE_NO_ENCONTRADO("CTES.002", "No existen clientes", "No existen clientes con los criterios de busqueda", "Info", ""); 	    private final String code;         private final String message; 	private final String description;     private final String level;     private final String moreInfo;         private ErrorEnum(final String code, final String message,     		final String description, final String level, final String moreInfo ) {         this.code = code;         this.message = message;         this.description = description;         this.level = level;         this.moreInfo = moreInfo;     } 	public String getCode() { 		return code; 	} 	public String getMessage() { 		return message; 	} 	public String getDescription() { 		return description; 	} 	public String getLevel() { 		return level; 	} 	public String getMoreInfo() { 		return moreInfo; 	} }


mongo-service .. exception GlobalExceptionHandler.java 
    package mx.isban.formacionplataformadigital.clientes.exception; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.MethodArgumentNotValidException; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import mx.isban.formacionplataformadigital.clientes.exception.model.DefaultError; import mx.isban.formacionplataformadigital.clientes.exception.model.DefaultErrorList; @ControllerAdvice public class GlobalExceptionHandler { 		@ExceptionHandler({MethodArgumentNotValidException.class}) 	public ResponseEntity<DefaultErrorList> handleValidationException(MethodArgumentNotValidException pe) { 		DefaultErrorList error = new DefaultErrorList(new DefaultError(ErrorEnum.CTE_REQUEST)); 		return new ResponseEntity<DefaultErrorList>(error, HttpStatus.BAD_REQUEST); 	} 		}


mongo-service .. model Cliente.java 
    package mx.isban.formacionplataformadigital.clientes.model; import java.io.Serializable; import javax.validation.constraints.NotNull; import javax.validation.constraints.Pattern; import org.hibernate.validator.constraints.Length; import org.hibernate.validator.constraints.NotEmpty; import org.hibernate.validator.constraints.Range; import org.springframework.data.annotation.Id; import org.springframework.data.mongodb.core.mapping.Document; @Document(collection = "clientes") public class Cliente implements Serializable{ 	private static final long serialVersionUID = 1L; 	@NotNull     @Id 	private long id; 		@NotEmpty 	@Length(min=1, max=100) 	@Pattern(regexp = "^[ a-zA-Z]*$") 	private String nombre; 		@NotEmpty 	@Length(min=1, max=100) 	@Pattern(regexp = "^[ a-zA-Z]*$") 	private String apellido; 		@NotNull 	@Range(min=18, max=50) 	private Integer edad; 			public Cliente(){		} 	public Cliente(Cliente cliente){ 		this.id = cliente.getId(); 		this.nombre = cliente.getNombre(); 		this.apellido = cliente.getApellido(); 		this.edad = cliente.getEdad(); 	} 	public Cliente(String nombre, String apellido, Integer edad){ 		this.nombre = nombre; 		this.apellido = apellido; 		this.edad = edad; 	} 		public Cliente(long id, String nombre, String apellido, Integer edad){ 		this.id = id; 		this.nombre = nombre; 		this.apellido = apellido; 		this.edad = edad; 	} 			public long getId() { 		return id; 	} 	public void setId(long id) { 		this.id = id; 	} 	public String getNombre() { 		return nombre; 	} 	public void setNombre(String nombre) { 		this.nombre = nombre; 	} 	public String getApellido() { 		return apellido; 	} 	public void setApellido(String apellido) { 		this.apellido = apellido; 	} 	public Integer getEdad() { 		return edad; 	} 	public void setEdad(Integer edad) { 		this.edad = edad; 	} 	@Override 	public String toString() { 		return "Cliente [id=" + id + ", nombre=" + nombre + ", apellido=" + apellido 				+ ", edad=" + edad + "]"; 	} }

mongo-service .. repository IClienteRepository.java 
    package mx.isban.formacionplataformadigital.clientes.repository; import org.springframework.data.repository.CrudRepository; import mx.isban.formacionplataformadigital.clientes.model.Cliente; public interface IClienteRepository extends CrudRepository<Cliente, Long> {     }

mongo-service .. service ClientesService.java 
    package mx.isban.formacionplataformadigital.clientes.service; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import mx.isban.formacionplataformadigital.clientes.dao.IClientesRepository; import mx.isban.formacionplataformadigital.clientes.exception.ClienteNoEncontradoException; import mx.isban.formacionplataformadigital.clientes.exception.ErrorEnum; import mx.isban.formacionplataformadigital.clientes.model.Cliente; @Service public class ClientesService implements IClientesService { 	@Autowired 	private IClientesRepository clientesRepository; 			@Override 	public List<Cliente> getClientesTodos() throws ClienteNoEncontradoException { 				List<Cliente> clientes = clientesRepository.findAll(); 				if(clientes.size() == 0){ 			throw new ClienteNoEncontradoException(ErrorEnum.CTE_NO_ENCONTRADO); 		} 				return clientes; 			} 		@Override 	public long guardarCliente(Cliente cte){ 		Cliente cliente = clientesRepository.save(cte); 				return cliente.getId(); 	} }

mongo-service .. service IClientesService.java 
    package mx.isban.formacionplataformadigital.clientes.service; import java.util.List; import mx.isban.formacionplataformadigital.clientes.exception.ClienteNoEncontradoException; import mx.isban.formacionplataformadigital.clientes.model.Cliente; public interface IClientesService { 			public List<Cliente> getClientesTodos() throws ClienteNoEncontradoException ; 	public long guardarCliente(Cliente cte); }

mongo-service .. clientes ClientesApplication.java 
    package mx.isban.formacionplataformadigital.clientes; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import springfox.documentation.swagger2.annotations.EnableSwagger2; @SpringBootApplication @EnableSwagger2 public class ClientesApplication { 	public static void main(String[] args) { 		SpringApplication.run(ClientesApplication.class, args); 	} 	}




