Microservicio basico con conexion a MongoDB
POM
<?xml version="1.0" encoding="UTF-8"?> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"> 	<modelVersion>4.0.0</modelVersion> 	<groupId>mx.isban.formacionplataformadigital</groupId> 	<artifactId>mongo-service</artifactId> 	<version>1.0.2-SNAPSHOT</version> 	<packaging>jar</packaging> 	<name>Microservicio de clientes</name> 	<description>Ejemplo de microservicio apegado a estandares</description> 	<parent> 		<groupId>org.springframework.boot</groupId> 		<artifactId>spring-boot-starter-parent</artifactId> 		<version>1.5.8.RELEASE</version> 		<relativePath /> <!-- lookup parent from repository --> 	</parent> 	<properties> 		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> 		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> 		<maven.compiler.source>1.8</maven.compiler.source> 		<maven.compiler.target>1.8</maven.compiler.target> 		<java.version>1.8</java.version> 	</properties> 	<dependencies> 		<dependency> 			<groupId>org.springframework.boot</groupId> 			<artifactId>spring-boot-starter-web</artifactId> 		</dependency> 								<!-- Librerias habilitadoras de componente Swagger swagger-ui.html --> 		<dependency> 			<groupId>io.springfox</groupId> 			<artifactId>springfox-swagger2</artifactId> 			<version>2.4.0</version> 		</dependency> 		<dependency> 			<groupId>io.springfox</groupId> 			<artifactId>springfox-swagger-ui</artifactId> 			<version>2.4.0</version> 		</dependency> 						<dependency> 			<groupId>org.springframework.boot</groupId> 			<artifactId>spring-boot-starter-test</artifactId> 			<scope>test</scope> 		</dependency> 						       <!-- Para conexion a BD --> 		<dependency> 			<groupId>org.springframework.data</groupId> 			<artifactId>spring-data-mongodb</artifactId> 		</dependency> 		<dependency> 			<groupId>org.mongodb</groupId> 			<artifactId>mongo-java-driver</artifactId> 		</dependency> 			   						<!-- Librerias para inyeccion de configuracion y fail fast--> 		<dependency> 			<groupId>org.springframework.cloud</groupId> 			<artifactId>spring-cloud-starter-config</artifactId> 		</dependency> 		<dependency>             <groupId>org.springframework.retry</groupId>             <artifactId>spring-retry</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-aop</artifactId>        </dependency> 	   	           <!-- Para trazabilidad entre microservicios --> 	   <dependency> 		    <groupId>org.springframework.cloud</groupId> 		    <artifactId>spring-cloud-starter-sleuth</artifactId> 		</dependency>         	</dependencies> 		<dependencyManagement> 		<dependencies> 			<dependency> 				<groupId>org.springframework.cloud</groupId> 				<artifactId>spring-cloud-dependencies</artifactId> 				<version>Dalston.SR3</version> 				<type>pom</type> 				<scope>import</scope> 			</dependency> 		</dependencies> 	</dependencyManagement> 		<build> 		<plugins> 			<plugin> 				<groupId>org.springframework.boot</groupId> 				<artifactId>spring-boot-maven-plugin</artifactId> 			</plugin> 		</plugins> 	</build> 		</project>

 mongo-service src main resources bootstrap.yml 
      spring:   application:     name: clientes-service   cloud:     config:       #Habilita que valide si existe servicio de configuracion para poder arrancar la aplicacion       failFast: false       retry:       #Intervalo de tiempo inicial entre cada repeticion         initialInterval: 6000       #Incremento exponencial del tiempo de intervalo inicial         multiplier: 1.5       #Tiempo maximo al que puede crecer el intervalo         maxInterval: 30000       enable: true       uri: http://config-service-git-mxpocasw1-dev.appls.cto2.paas.gsnetcloud.corp/       name: ${spring.application.name}       label: master       profile: dev       allow-override: true   data:     mongodb:       host: mongodb       port: 27017       database: mongodb       username: usuario       password: pass logging:   level:     mx:       isban:         formacionplataformadigital:           clientes: DEBUG

 mongo-service .. controller ClientesController.java 
     package mx.isban.formacionplataformadigital.clientes.controller; import java.net.URI; import java.util.List; import javax.validation.Valid; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.servlet.support.ServletUriComponentsBuilder; import org.springframework.web.util.UriComponentsBuilder; import mx.isban.formacionplataformadigital.clientes.exception.ClienteNoEncontradoException; import mx.isban.formacionplataformadigital.clientes.exception.ErrorEnum; import mx.isban.formacionplataformadigital.clientes.exception.model.DefaultError; import mx.isban.formacionplataformadigital.clientes.exception.model.DefaultErrorList; import mx.isban.formacionplataformadigital.clientes.model.Cliente; import mx.isban.formacionplataformadigital.clientes.service.IClientesService; @RestController @RequestMapping("/clientes") public class ClientesController { 		@Autowired 	private IClientesService clientesService; 		/** La Constante logger. Obtiene el Logger de la clase */     private static final Logger logger = LoggerFactory.getLogger(ClientesController.class); 	    @GetMapping(value = "/", produces = MediaType.APPLICATION_JSON_UTF8_VALUE )     public ResponseEntity<?> getClientesTodos() {         logger.info("Consulta clientes");         List<Cliente> clientes;         		try { 			clientes = clientesService.getClientesTodos(); 	        return new ResponseEntity<List<Cliente>>(clientes, HttpStatus.OK); 		} catch (ClienteNoEncontradoException e) { 			 logger.error("Clientes no encontrados"); 	            return new ResponseEntity<Object>( 	            		new DefaultErrorList(new DefaultError(ErrorEnum.CTE_NO_ENCONTRADO)), HttpStatus.NOT_FOUND); 		} 		    }         @PostMapping(value = "/", 					consumes = MediaType.APPLICATION_JSON_UTF8_VALUE, 					produces = MediaType.APPLICATION_JSON_UTF8_VALUE )     public ResponseEntity<?> crearCuenta(@Valid @RequestBody Cliente cte, UriComponentsBuilder ucBuilder) {         logger.info("Creando cliente : {}", cte);                 long cteId = clientesService.guardarCliente(cte); 		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path( 				"/{id}").buildAndExpand(cteId).toUri(); 				return ResponseEntity.created(location).build(); 			            }     }

mongo-service .. dao IClientesRepository.java 
    package mx.isban.formacionplataformadigital.clientes.dao; import org.springframework.data.mongodb.repository.MongoRepository; import mx.isban.formacionplataformadigital.clientes.model.Cliente; public interface IClientesRepository extends MongoRepository<Cliente, String> { 	}


mongo-service .. model DefaultErrorList.java 
    package mx.isban.formacionplataformadigital.clientes.exception.model; import java.io.Serializable; import java.util.ArrayList; import java.util.List; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.ObjectMapper; /**  * La clase DefaultErrorResponseBean, usada para enviar la respuesta en caso de error durante la ejecucion del servicio.  *  * @author Transformacion Digital  */ public class DefaultErrorList implements Serializable { 	/** Variable para serializar la clase. */ 	private static final long serialVersionUID = 1L; 	/** La variable errors. */ 	private List<DefaultError> errors; 		/** 	 * Constructor de la clase. 	 * Un ejemplo de implementacion es agregar la siguiente linea: 	 * 	 * 		DefaultErrorResponseBean errorResp = new DefaultErrorResponseBean(new ErrorBean(ErrorEnum.FORBIDDEN)); 	 * 	 * En donde el objeto ErrorEnum es la clase con la serie de codigos de errores (Puede utilizarse esa misma clase generica, o una implementacion propia) 	 */ 	public DefaultErrorList(final DefaultError errorBean){ 		this.add(errorBean); 	} 	/** 	 * Obtiene el valor de la variable errors. 	 * 	 * @return el errors 	 */ 	public List<DefaultError> getErrors() { 		return errors; 	} 	/** 	 * Coloca el valor de errors. 	 * 	 * @param errors 	 *            es el nuevo valor de errors 	 */ 	public void setErrors(List<DefaultError> errors) { 		this.errors = errors; 	} 	/** 	 * Adds the. 	 * 	 * @param errorBean 	 *            el parametro error bean 	 */ 	public void add(final DefaultError errorBean) { 		if (this.errors == null || this.errors.isEmpty()) { 			this.errors = new ArrayList<>(); 		} 		this.errors.add(errorBean); 	} 		/** 	 * @return El json en string del objeto completo 	 * @throws JsonProcessingException Cuando existe error en el parseo 	 */ 	public String toJsonString() throws JsonProcessingException{ 		ObjectMapper objectMapper= new ObjectMapper(); 		return objectMapper.writeValueAsString(this); 	} }

mongo-service .. model DefaultError.java  
    package mx.isban.formacionplataformadigital.clientes.exception.model; import java.io.Serializable; import mx.isban.formacionplataformadigital.clientes.exception.ErrorEnum; /**  * La clase ErrorBean, usada para indicar los errores que sucedieron durante la ejecucion.  * @author Transformacion Digital  */ public class DefaultError implements Serializable {     /** Variable para serializar la clase. */     private static final long serialVersionUID = 1L; 	/** La variable code. */     private String code;         /** La variable message. */     private String message;     /** La variable level. */     private String level;     /** La variable description. */     private String description;         /** La variable more info. */     private String moreInfo;     /**      * @param code Un codigo de error unico, el cual pueda ser identificado y localizado para mas detalles. Debe ser human readable, por tanto no deberia ser un codigo numerico, sino alfanumerico.      * @param message Un mensaje de error claro: Por consideraciones de seguridad estos mensajes de error no deben contener informacion interna que pudiera implicar un riesgo a la seguridad e integridad.      * @param level  Un nivel de error: info, warning, error.      * @param description Una descripcion detallada.      * @param moreInfo Un link a la documentacion del codigo de error.      */     public DefaultError(String code, String message, String level,     		String description, String moreInfo) { 		this.code = code; 		this.message = message; 		this.level = level; 		this.description = description; 		this.moreInfo = moreInfo; 	}     /**      * @param errorEnum      */     public DefaultError(ErrorEnum errorEnum) { 		this.code = errorEnum.getCode(); 		this.message = errorEnum.getMessage(); 		this.level = errorEnum.getLevel(); 		this.description = errorEnum.getDescription(); 		this.moreInfo = errorEnum.getMoreInfo(); 	}     /**      * Obtiene el valor de la variable code.      *      * @return el code      */     public String getCode() {         return code;     }     /**      * Coloca el valor de code.      *      * @param code es el nuevo valor de code      */     public void setCode(String code) {         this.code = code;     }     /**      * Obtiene el valor de la variable message.      *      * @return el message      */     public String getMessage() {         return message;     }     /**      * Coloca el valor de message.      *      * @param message es el nuevo valor de message      */     public void setMessage(String message) {         this.message = message;     }     /**      * Obtiene el valor de la variable nivel.      *      * @return el level      */     public String getLevel() {         return level;     }     /**      * Coloca el valor de level.      *      * @param level es el nuevo valor del nivel      */     public void setLevel(String level) {         this.level = level;     }     /**      * Obtiene el valor de la variable description.      *      * @return el description      */     public String getDescription() {         return description;     }     /**      * Coloca el valor de description.      *      * @param description es el nuevo valor de description      */     public void setDescription(String description) {         this.description = description;     }     /**      * Obtiene el valor de la variable more info.      *      * @return el more info      */     public String getMoreInfo() {         return moreInfo;     }     /**      * Coloca el valor de more info.      *      * @param moreInfo es el nuevo valor de more info      */     public void setMoreInfo(String moreInfo) {         this.moreInfo = moreInfo;     } }

mongo-service .. exception ClienteNoEncontradoException.java 
    package mx.isban.formacionplataformadigital.clientes.exception; /**  * Clase del tipo exception de negocio  * @author Transformacion Digital  */ public class ClienteNoEncontradoException extends Exception {     private static final long serialVersionUID = 1303454450535514738L;         /**      * Constructor      * @param message Mensaje de error      */     public ClienteNoEncontradoException(String message) {         super(message);     }         /**      * Constructor      * @param message Mensaje de error      * @param causa Causa completa del error      */     public ClienteNoEncontradoException(String message, Throwable causa) {         super(message, causa);     }         /**      * Constructor que la interfaz del enumerador de error      * @param errorEnum Interfaz de enumerador de error      */     public ClienteNoEncontradoException(ErrorEnum errorEnum) {         super(errorEnum.getMessage());     }             /**      * Constructor que la interfaz del enumerador de error      * @param errorEnum Interfaz de enumerador de error      * @param causa Causa completa del error      */     public ClienteNoEncontradoException(ErrorEnum errorEnum, Throwable causa) {         super(errorEnum.getMessage(), causa);     }     }

mongo-service .. exception ErrorEnum.java 
    package mx.isban.formacionplataformadigital.clientes.exception; /**  * The Enum ErrorEnum.  * @author Transformacion Digital  */ public enum ErrorEnum { 	CTE_GENERICO("CTES.000", "Error generico", "Error generico de clientes", "Error", ""), 	CTE_REQUEST("CTES.001", "Parametros invalidos", "Parametros invalidos de consumo", "Error", ""), 		CTE_NO_ENCONTRADO("CTES.002", "No existen clientes", "No existen clientes con los criterios de busqueda", "Info", ""); 	    private final String code;         private final String message; 	private final String description;     private final String level;     private final String moreInfo;         private ErrorEnum(final String code, final String message,     		final String description, final String level, final String moreInfo ) {         this.code = code;         this.message = message;         this.description = description;         this.level = level;         this.moreInfo = moreInfo;     } 	public String getCode() { 		return code; 	} 	public String getMessage() { 		return message; 	} 	public String getDescription() { 		return description; 	} 	public String getLevel() { 		return level; 	} 	public String getMoreInfo() { 		return moreInfo; 	} }


mongo-service .. exception GlobalExceptionHandler.java 
    package mx.isban.formacionplataformadigital.clientes.exception; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.MethodArgumentNotValidException; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import mx.isban.formacionplataformadigital.clientes.exception.model.DefaultError; import mx.isban.formacionplataformadigital.clientes.exception.model.DefaultErrorList; @ControllerAdvice public class GlobalExceptionHandler { 		@ExceptionHandler({MethodArgumentNotValidException.class}) 	public ResponseEntity<DefaultErrorList> handleValidationException(MethodArgumentNotValidException pe) { 		DefaultErrorList error = new DefaultErrorList(new DefaultError(ErrorEnum.CTE_REQUEST)); 		return new ResponseEntity<DefaultErrorList>(error, HttpStatus.BAD_REQUEST); 	} 		}


mongo-service .. model Cliente.java 
    package mx.isban.formacionplataformadigital.clientes.model; import java.io.Serializable; import javax.validation.constraints.NotNull; import javax.validation.constraints.Pattern; import org.hibernate.validator.constraints.Length; import org.hibernate.validator.constraints.NotEmpty; import org.hibernate.validator.constraints.Range; import org.springframework.data.annotation.Id; import org.springframework.data.mongodb.core.mapping.Document; @Document(collection = "clientes") public class Cliente implements Serializable{ 	private static final long serialVersionUID = 1L; 	@NotNull     @Id 	private long id; 		@NotEmpty 	@Length(min=1, max=100) 	@Pattern(regexp = "^[ a-zA-Z]*$") 	private String nombre; 		@NotEmpty 	@Length(min=1, max=100) 	@Pattern(regexp = "^[ a-zA-Z]*$") 	private String apellido; 		@NotNull 	@Range(min=18, max=50) 	private Integer edad; 			public Cliente(){		} 	public Cliente(Cliente cliente){ 		this.id = cliente.getId(); 		this.nombre = cliente.getNombre(); 		this.apellido = cliente.getApellido(); 		this.edad = cliente.getEdad(); 	} 	public Cliente(String nombre, String apellido, Integer edad){ 		this.nombre = nombre; 		this.apellido = apellido; 		this.edad = edad; 	} 		public Cliente(long id, String nombre, String apellido, Integer edad){ 		this.id = id; 		this.nombre = nombre; 		this.apellido = apellido; 		this.edad = edad; 	} 			public long getId() { 		return id; 	} 	public void setId(long id) { 		this.id = id; 	} 	public String getNombre() { 		return nombre; 	} 	public void setNombre(String nombre) { 		this.nombre = nombre; 	} 	public String getApellido() { 		return apellido; 	} 	public void setApellido(String apellido) { 		this.apellido = apellido; 	} 	public Integer getEdad() { 		return edad; 	} 	public void setEdad(Integer edad) { 		this.edad = edad; 	} 	@Override 	public String toString() { 		return "Cliente [id=" + id + ", nombre=" + nombre + ", apellido=" + apellido 				+ ", edad=" + edad + "]"; 	} }

mongo-service .. repository IClienteRepository.java 
    package mx.isban.formacionplataformadigital.clientes.repository; import org.springframework.data.repository.CrudRepository; import mx.isban.formacionplataformadigital.clientes.model.Cliente; public interface IClienteRepository extends CrudRepository<Cliente, Long> {     }

mongo-service .. service ClientesService.java 
    package mx.isban.formacionplataformadigital.clientes.service; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import mx.isban.formacionplataformadigital.clientes.dao.IClientesRepository; import mx.isban.formacionplataformadigital.clientes.exception.ClienteNoEncontradoException; import mx.isban.formacionplataformadigital.clientes.exception.ErrorEnum; import mx.isban.formacionplataformadigital.clientes.model.Cliente; @Service public class ClientesService implements IClientesService { 	@Autowired 	private IClientesRepository clientesRepository; 			@Override 	public List<Cliente> getClientesTodos() throws ClienteNoEncontradoException { 				List<Cliente> clientes = clientesRepository.findAll(); 				if(clientes.size() == 0){ 			throw new ClienteNoEncontradoException(ErrorEnum.CTE_NO_ENCONTRADO); 		} 				return clientes; 			} 		@Override 	public long guardarCliente(Cliente cte){ 		Cliente cliente = clientesRepository.save(cte); 				return cliente.getId(); 	} }

mongo-service .. service IClientesService.java 
    package mx.isban.formacionplataformadigital.clientes.service; import java.util.List; import mx.isban.formacionplataformadigital.clientes.exception.ClienteNoEncontradoException; import mx.isban.formacionplataformadigital.clientes.model.Cliente; public interface IClientesService { 			public List<Cliente> getClientesTodos() throws ClienteNoEncontradoException ; 	public long guardarCliente(Cliente cte); }

mongo-service .. clientes ClientesApplication.java 
    package mx.isban.formacionplataformadigital.clientes; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import springfox.documentation.swagger2.annotations.EnableSwagger2; @SpringBootApplication @EnableSwagger2 public class ClientesApplication { 	public static void main(String[] args) { 		SpringApplication.run(ClientesApplication.class, args); 	} 	}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Microservicio basico con conexion a MySQL por medio de JPA y JDB
POM


<?xml version="1.0" encoding="UTF-8"?> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"> 	<modelVersion>4.0.0</modelVersion> 	<groupId>mx.isban.formacionplataformadigital</groupId> 	<artifactId>clientes-service</artifactId> 	<version>1.0.2-SNAPSHOT</version> 	<packaging>jar</packaging> 	<name>Microservicio de clientes</name> 	<description>Ejemplo de microservicio apegado a estandares</description> 	<parent> 		<groupId>org.springframework.boot</groupId> 		<artifactId>spring-boot-starter-parent</artifactId> 		<version>1.5.7.RELEASE</version> 		<relativePath /> <!-- lookup parent from repository --> 	</parent> 	<properties> 		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> 		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> 		<maven.compiler.source>1.8</maven.compiler.source> 		<maven.compiler.target>1.8</maven.compiler.target> 		<java.version>1.8</java.version> 	</properties> 	<dependencies> 		<dependency> 			<groupId>org.springframework.boot</groupId> 			<artifactId>spring-boot-starter-web</artifactId> 		</dependency> 								<!-- Librerias habilitadoras de componente Swagger swagger-ui.html --> 		<dependency> 			<groupId>io.springfox</groupId> 			<artifactId>springfox-swagger2</artifactId> 			<version>2.4.0</version> 		</dependency> 		<dependency> 			<groupId>io.springfox</groupId> 			<artifactId>springfox-swagger-ui</artifactId> 			<version>2.4.0</version> 		</dependency> 						<dependency> 			<groupId>org.springframework.boot</groupId> 			<artifactId>spring-boot-starter-test</artifactId> 			<scope>test</scope> 		</dependency> 						       <!-- Para conexion a BD --> 		<dependency> 			<groupId>org.springframework.boot</groupId> 			<artifactId>spring-boot-starter-jdbc</artifactId> <!-- Implementacion por JDBC --> 		</dependency> 		<dependency> 			<groupId>mysql</groupId> 			<artifactId>mysql-connector-java</artifactId> <!-- Driver Mysql --> 		</dependency> 	   <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-data-jpa</artifactId> <!-- Implementacion por JPA -->         </dependency> 			   						<!-- Librerias para inyeccion de configuracion y fail fast--> 		<dependency> 			<groupId>org.springframework.cloud</groupId> 			<artifactId>spring-cloud-starter-config</artifactId> 		</dependency> 		<dependency>             <groupId>org.springframework.retry</groupId>             <artifactId>spring-retry</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-aop</artifactId>        </dependency> 	   	           <!-- Para trazabilidad entre microservicios --> 	   <dependency> 		    <groupId>org.springframework.cloud</groupId> 		    <artifactId>spring-cloud-starter-sleuth</artifactId> 		</dependency> 		<dependency> 		  <groupId>org.springframework.cloud</groupId> 		  <artifactId>spring-cloud-sleuth-zipkin</artifactId> 		</dependency>         	</dependencies> 		<dependencyManagement> 		<dependencies> 			<dependency> 				<groupId>org.springframework.cloud</groupId> 				<artifactId>spring-cloud-dependencies</artifactId> 				<version>Dalston.SR3</version> 				<type>pom</type> 				<scope>import</scope> 			</dependency> 		</dependencies> 	</dependencyManagement> 		<build> 		<plugins> 			<plugin> 				<groupId>org.springframework.boot</groupId> 				<artifactId>spring-boot-maven-plugin</artifactId> 			</plugin> 		</plugins> 	</build> 		</project>


clientes-service .. controller ClientesController.java 
package mx.isban.formacionplataformadigital.clientes.controller; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController; import mx.isban.formacionplataformadigital.clientes.exception.ClienteNoEncontradoException; import mx.isban.formacionplataformadigital.clientes.exception.ErrorEnum; import mx.isban.formacionplataformadigital.clientes.exception.model.DefaultError; import mx.isban.formacionplataformadigital.clientes.exception.model.DefaultErrorList; import mx.isban.formacionplataformadigital.clientes.model.Cliente; import mx.isban.formacionplataformadigital.clientes.service.IClientesService; @RestController @RequestMapping("/clientes") public class ClientesController { 		@Autowired 	private IClientesService clientesService; 		/** La Constante logger. Obtiene el Logger de la clase */     private static final Logger logger = LoggerFactory.getLogger(ClientesController.class); 	    @RequestMapping(value = "/{id}/datosbasicos", method = RequestMethod.GET,     				produces = MediaType.APPLICATION_JSON_UTF8_VALUE )     public ResponseEntity<?> getClientePorId(@PathVariable("id") long id)  {         logger.info("Consulta cliente con id {}", id);         Cliente cliente;         		try { 			cliente = clientesService.getClientePorId(id); 	        return new ResponseEntity<Cliente>(cliente, HttpStatus.OK); 		} catch (ClienteNoEncontradoException e) { 			logger.error("Cliente con id {} no encontrado", id); 			return new ResponseEntity<Object>(             		new DefaultErrorList(new DefaultError(ErrorEnum.CTE_NO_ENCONTRADO)), HttpStatus.NOT_FOUND);  		}             }         @RequestMapping(value = "/", method = RequestMethod.GET,     				produces = MediaType.APPLICATION_JSON_UTF8_VALUE )     public ResponseEntity<?> getClientesTodos() {         logger.info("Consulta clientes");         List<Cliente> clientes;         		try { 			clientes = clientesService.getClientesTodos(); 	        return new ResponseEntity<List<Cliente>>(clientes, HttpStatus.OK); 		} catch (ClienteNoEncontradoException e) { 			 logger.error("Clientes no encontrados"); 	            return new ResponseEntity<Object>( 	            		new DefaultErrorList(new DefaultError(ErrorEnum.CTE_NO_ENCONTRADO)), HttpStatus.NOT_FOUND); 		} 		    }         }

clientes-service .. dao ClientesDAO.java 
package mx.isban.formacionplataformadigital.clientes.dao; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.jdbc.core.BeanPropertyRowMapper; import org.springframework.jdbc.core.JdbcTemplate; import org.springframework.stereotype.Repository; import mx.isban.formacionplataformadigital.clientes.model.Cliente; @Repository public class ClientesDAO implements IClientesDAO{ 	private static final Logger logger = LoggerFactory.getLogger(ClientesDAO.class); 		@Autowired 	private JdbcTemplate jdbcTemplate; 	private String queryClientes = "SELECT id, nombre, apellido, edad FROM cliente"; 		public List<Cliente> getClientesTodos() { 		logger.info("A ejecutar consulta de clientes"); 				List<Cliente> clientes  = jdbcTemplate.query( 				queryClientes, 				new BeanPropertyRowMapper<Cliente>(Cliente.class)); 		logger.info("Consulta de clientes ejecutada exitosamente"); 		logger.debug("Contenido de consulta {}", clientes); 				return clientes; 	} 	}

clientes-service .. dao IClientesDAO.java 
package mx.isban.formacionplataformadigital.clientes.dao; import java.util.List; import mx.isban.formacionplataformadigital.clientes.model.Cliente; public interface IClientesDAO { 		public List<Cliente> getClientesTodos(); }

clientes-service src main resources bootstrap.yml 
spring:   application:     name: clientes-service   cloud:     config:       #Habilita que valide si existe servicio de configuracion para poder arrancar la aplicacion       failFast: false       retry:       #Intervalo de tiempo inicial entre cada repeticion         initialInterval: 6000       #Incremento exponencial del tiempo de intervalo inicial         multiplier: 1.5       #Tiempo maximo al que puede crecer el intervalo         maxInterval: 30000       enable: true       uri: http://config-service-git-mxpocasw1-dev.appls.cto2.paas.gsnetcloud.corp/       name: ${spring.application.name}       label: master       profile: dev       allow-override: true   datasource:     url: jdbc:mysql://localhost:3306/bdtaller?useSSL=false     username: root     password:     driver-class-name: com.mysql.jdbc.Driver     initialize: false   zipkin:     base-url: http://localhost:8078/   sleuth:     sampler:       percentage: 1.0 #100% de peticiones logging:   level:     mx:       isban:         formacionplataformadigital:           clientes: DEBUG



clientes-service .. model DefaultError.java 
package mx.isban.formacionplataformadigital.clientes.exception.model; import java.io.Serializable; import mx.isban.formacionplataformadigital.clientes.exception.ErrorEnum; /**  * La clase ErrorBean, usada para indicar los errores que sucedieron durante la ejecucion.  * @author Transformacion Digital  */ public class DefaultError implements Serializable {     /** Variable para serializar la clase. */     private static final long serialVersionUID = 1L; 	/** La variable code. */     private String code;         /** La variable message. */     private String message;     /** La variable level. */     private String level;     /** La variable description. */     private String description;         /** La variable more info. */     private String moreInfo;     /**      * @param code Un codigo de error unico, el cual pueda ser identificado y localizado para mas detalles. Debe ser human readable, por tanto no deberia ser un codigo numerico, sino alfanumerico.      * @param message Un mensaje de error claro: Por consideraciones de seguridad estos mensajes de error no deben contener informacion interna que pudiera implicar un riesgo a la seguridad e integridad.      * @param level  Un nivel de error: info, warning, error.      * @param description Una descripcion detallada.      * @param moreInfo Un link a la documentacion del codigo de error.      */     public DefaultError(String code, String message, String level,     		String description, String moreInfo) { 		this.code = code; 		this.message = message; 		this.level = level; 		this.description = description; 		this.moreInfo = moreInfo; 	}     /**      * @param errorEnum      */     public DefaultError(ErrorEnum errorEnum) { 		this.code = errorEnum.getCode(); 		this.message = errorEnum.getMessage(); 		this.level = errorEnum.getLevel(); 		this.description = errorEnum.getDescription(); 		this.moreInfo = errorEnum.getMoreInfo(); 	}     /**      * Obtiene el valor de la variable code.      *      * @return el code      */     public String getCode() {         return code;     }     /**      * Coloca el valor de code.      *      * @param code es el nuevo valor de code      */     public void setCode(String code) {         this.code = code;     }     /**      * Obtiene el valor de la variable message.      *      * @return el message      */     public String getMessage() {         return message;     }     /**      * Coloca el valor de message.      *      * @param message es el nuevo valor de message      */     public void setMessage(String message) {         this.message = message;     }     /**      * Obtiene el valor de la variable nivel.      *      * @return el level      */     public String getLevel() {         return level;     }     /**      * Coloca el valor de level.      *      * @param level es el nuevo valor del nivel      */     public void setLevel(String level) {         this.level = level;     }     /**      * Obtiene el valor de la variable description.      *      * @return el description      */     public String getDescription() {         return description;     }     /**      * Coloca el valor de description.      *      * @param description es el nuevo valor de description      */     public void setDescription(String description) {         this.description = description;     }     /**      * Obtiene el valor de la variable more info.      *      * @return el more info      */     public String getMoreInfo() {         return moreInfo;     }     /**      * Coloca el valor de more info.      *      * @param moreInfo es el nuevo valor de more info      */     public void setMoreInfo(String moreInfo) {         this.moreInfo = moreInfo;     } }
     
clientes-service .. model DefaultErrorList.java
package mx.isban.formacionplataformadigital.clientes.exception.model; import java.io.Serializable; import java.util.ArrayList; import java.util.List; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.ObjectMapper; /**  * La clase DefaultErrorResponseBean, usada para enviar la respuesta en caso de error durante la ejecucion del servicio.  *  * @author Transformacion Digital  */ public class DefaultErrorList implements Serializable { 	/** Variable para serializar la clase. */ 	private static final long serialVersionUID = 1L; 	/** La variable errors. */ 	private List<DefaultError> errors; 		/** 	 * Constructor de la clase. 	 * Un ejemplo de implementacion es agregar la siguiente linea: 	 * 	 * 		DefaultErrorResponseBean errorResp = new DefaultErrorResponseBean(new ErrorBean(ErrorEnum.FORBIDDEN)); 	 * 	 * En donde el objeto ErrorEnum es la clase con la serie de codigos de errores (Puede utilizarse esa misma clase generica, o una implementacion propia) 	 */ 	public DefaultErrorList(final DefaultError errorBean){ 		this.add(errorBean); 	} 	/** 	 * Obtiene el valor de la variable errors. 	 * 	 * @return el errors 	 */ 	public List<DefaultError> getErrors() { 		return errors; 	} 	/** 	 * Coloca el valor de errors. 	 * 	 * @param errors 	 *            es el nuevo valor de errors 	 */ 	public void setErrors(List<DefaultError> errors) { 		this.errors = errors; 	} 	/** 	 * Adds the. 	 * 	 * @param errorBean 	 *            el parametro error bean 	 */ 	public void add(final DefaultError errorBean) { 		if (this.errors == null || this.errors.isEmpty()) { 			this.errors = new ArrayList<>(); 		} 		this.errors.add(errorBean); 	} 		/** 	 * @return El json en string del objeto completo 	 * @throws JsonProcessingException Cuando existe error en el parseo 	 */ 	public String toJsonString() throws JsonProcessingException{ 		ObjectMapper objectMapper= new ObjectMapper(); 		return objectMapper.writeValueAsString(this); 	} }

clientes-service .. exception ClienteNoEncontradoException.java 
package mx.isban.formacionplataformadigital.clientes.exception; /**  * Clase del tipo exception de negocio  * @author Transformacion Digital  */ public class ClienteNoEncontradoException extends Exception {     private static final long serialVersionUID = 1303454450535514738L;         /**      * Constructor      * @param message Mensaje de error      */     public ClienteNoEncontradoException(String message) {         super(message);     }         /**      * Constructor      * @param message Mensaje de error      * @param causa Causa completa del error      */     public ClienteNoEncontradoException(String message, Throwable causa) {         super(message, causa);     }         /**      * Constructor que la interfaz del enumerador de error      * @param errorEnum Interfaz de enumerador de error      */     public ClienteNoEncontradoException(ErrorEnum errorEnum) {         super(errorEnum.getMessage());     }             /**      * Constructor que la interfaz del enumerador de error      * @param errorEnum Interfaz de enumerador de error      * @param causa Causa completa del error      */     public ClienteNoEncontradoException(ErrorEnum errorEnum, Throwable causa) {         super(errorEnum.getMessage(), causa);     }     }

clientes-service .. exception ErrorEnum.java 
package mx.isban.formacionplataformadigital.clientes.exception; /**  * The Enum ErrorEnum.  * @author Transformacion Digital  */ public enum ErrorEnum { 	CTE_NO_ENCONTRADO("CTES.000", "Cliente no encontrado", "Cliente no encontrado", "Error", ""); 	    private final String code;         private final String message; 	private final String description;     private final String level;     private final String moreInfo;         private ErrorEnum(final String code, final String message,     		final String description, final String level, final String moreInfo ) {         this.code = code;         this.message = message;         this.description = description;         this.level = level;         this.moreInfo = moreInfo;     } 	public String getCode() { 		return code; 	} 	public String getMessage() { 		return message; 	} 	public String getDescription() { 		return description; 	} 	public String getLevel() { 		return level; 	} 	public String getMoreInfo() { 		return moreInfo; 	} }

clientes-service .. exception GlobalExceptionHandler.java
package mx.isban.formacionplataformadigital.clientes.exception; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.ResponseStatus; import mx.isban.formacionplataformadigital.clientes.exception.model.DefaultError; import mx.isban.formacionplataformadigital.clientes.exception.model.DefaultErrorList; @ControllerAdvice public class GlobalExceptionHandler { 	@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)     @ExceptionHandler(Exception.class)     public ResponseEntity<DefaultErrorList> handleGenericException(Exception ex) { 		DefaultErrorList error = new DefaultErrorList(new DefaultError(ErrorEnum.CTE_NO_ENCONTRADO)); 		return new ResponseEntity<DefaultErrorList>(error, HttpStatus.INTERNAL_SERVER_ERROR);     } 		}

clientes-service .. model Cliente.java
package mx.isban.formacionplataformadigital.clientes.model; import java.io.Serializable; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.validation.constraints.Min; import javax.validation.constraints.NotNull; import javax.validation.constraints.Pattern; import org.hibernate.validator.constraints.Length; @Entity public class Cliente implements Serializable{ 	private static final long serialVersionUID = 1L;     @Id     @GeneratedValue(strategy=GenerationType.AUTO) 	@NotNull 	private long id; 		@NotNull 	@Length(min=1, max=100) 	@Pattern(regexp = "^[ a-zA-Z]*$") 	private String nombre; 		@NotNull 	@Length(min=1, max=100) 	@Pattern(regexp = "^[ a-zA-Z]*$") 	private String apellido; 		@NotNull 	@Min(value = 0, message = "El valor debe ser positivo") 	private Integer edad; 			public Cliente(){		} 	public Cliente(Cliente cliente){ 		this.id = cliente.getId(); 		this.nombre = cliente.getNombre(); 		this.apellido = cliente.getApellido(); 		this.edad = cliente.getEdad(); 	} 	public Cliente(String nombre, String apellido, Integer edad){ 		this.nombre = nombre; 		this.apellido = apellido; 		this.edad = edad; 	} 		public Cliente(long id, String nombre, String apellido, Integer edad){ 		this.id = id; 		this.nombre = nombre; 		this.apellido = apellido; 		this.edad = edad; 	} 			public long getId() { 		return id; 	} 	public void setId(long id) { 		this.id = id; 	} 	public String getNombre() { 		return nombre; 	} 	public void setNombre(String nombre) { 		this.nombre = nombre; 	} 	public String getApellido() { 		return apellido; 	} 	public void setApellido(String apellido) { 		this.apellido = apellido; 	} 	public Integer getEdad() { 		return edad; 	} 	public void setEdad(Integer edad) { 		this.edad = edad; 	} 	@Override 	public String toString() { 		return "Cliente [id=" + id + ", nombre=" + nombre + ", apellido=" + apellido 				+ ", edad=" + edad + "]"; 	} }

clientes-service .. repository IClienteRepository.java 
package mx.isban.formacionplataformadigital.clientes.repository; import org.springframework.data.repository.CrudRepository; import mx.isban.formacionplataformadigital.clientes.model.Cliente; public interface IClienteRepository extends CrudRepository<Cliente, Long> {     }

clientes-service .. service ClientesService.java 
package mx.isban.formacionplataformadigital.clientes.service; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import mx.isban.formacionplataformadigital.clientes.dao.IClientesDAO; import mx.isban.formacionplataformadigital.clientes.exception.ClienteNoEncontradoException; import mx.isban.formacionplataformadigital.clientes.exception.ErrorEnum; import mx.isban.formacionplataformadigital.clientes.model.Cliente; import mx.isban.formacionplataformadigital.clientes.repository.IClienteRepository; @Service public class ClientesService implements IClientesService { 	@Autowired 	private IClientesDAO clientesDao; 	@Autowired 	private IClienteRepository clientesRepository; 			@Override 	public Cliente getClientePorId(long id) throws ClienteNoEncontradoException { 		Cliente cliente = clientesRepository.findOne(id); 				if(cliente==null){ 			throw new ClienteNoEncontradoException(ErrorEnum.CTE_NO_ENCONTRADO); 		} 				return cliente; 	} 			@Override 	public List<Cliente> getClientesTodos() throws ClienteNoEncontradoException { 				List<Cliente> clientes = clientesDao.getClientesTodos(); 				if(clientes.size() == 0){ 			throw new ClienteNoEncontradoException(ErrorEnum.CTE_NO_ENCONTRADO); 		} 				return clientes; 			} }

clientes-service .. service IClientesService.java 
package mx.isban.formacionplataformadigital.clientes.service; import java.util.List; import mx.isban.formacionplataformadigital.clientes.exception.ClienteNoEncontradoException; import mx.isban.formacionplataformadigital.clientes.model.Cliente; public interface IClientesService { 		public Cliente getClientePorId(long id) throws ClienteNoEncontradoException; 		public List<Cliente> getClientesTodos() throws ClienteNoEncontradoException ; }

clientes-service .. clientes ClientesApplication.java 
package mx.isban.formacionplataformadigital.clientes; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.sleuth.sampler.AlwaysSampler; import org.springframework.context.annotation.Bean; import springfox.documentation.swagger2.annotations.EnableSwagger2; @SpringBootApplication @EnableSwagger2 public class ClientesApplication { 	public static void main(String[] args) { 		SpringApplication.run(ClientesApplication.class, args); 	} 		@Bean 	public AlwaysSampler defaultSampler() { 	  return new AlwaysSampler(); 	} }



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Microservicio basico con pruebas unitarias e invocacion a otro microservicio

cuentas-service .. controller CuentasController.java 
package mx.isban.formacionplataformadigital.cuentas.controller; import java.net.URI; import javax.validation.Valid; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.servlet.support.ServletUriComponentsBuilder; import org.springframework.web.util.UriComponentsBuilder; import mx.isban.formacionplataformadigital.cuentas.exception.CuentaNoEncontradaException; import mx.isban.formacionplataformadigital.cuentas.exception.ErrorEnum; import mx.isban.formacionplataformadigital.cuentas.exception.LimiteCuentasException; import mx.isban.formacionplataformadigital.cuentas.exception.model.DefaultError; import mx.isban.formacionplataformadigital.cuentas.exception.model.DefaultErrorList; import mx.isban.formacionplataformadigital.cuentas.model.Cuenta; import mx.isban.formacionplataformadigital.cuentas.service.ICuentasService; @RestController @RequestMapping("/cuentas") public class CuentasController { 		@Autowired 	private ICuentasService ctaService; 		/** La Constante logger. Obtiene el Logger de la clase */     private static final Logger logger = LoggerFactory.getLogger(CuentasController.class);         @RequestMapping(value = "/{id}/datosbasicos", method = RequestMethod.GET , 			produces = MediaType.APPLICATION_JSON_UTF8_VALUE )     public ResponseEntity<?> getCuentaPorId(@PathVariable("id") long id) {         logger.info("Consulta cuentas con id {}", id);         Cuenta cta;         		try { 			cta = ctaService.getPorId(id); 	        return new ResponseEntity<Cuenta>(cta, HttpStatus.OK); 		} catch (CuentaNoEncontradaException e) { 			logger.error("Cuenta con id {} no encontrado", id);             return new ResponseEntity<Object>(             		new DefaultErrorList(new DefaultError(ErrorEnum.CTAS_NO_ENCONTRADA)), HttpStatus.NOT_FOUND); 		}     }             @RequestMapping(value = "/", method = RequestMethod.POST, 					consumes = MediaType.APPLICATION_JSON_UTF8_VALUE, 					produces = MediaType.APPLICATION_JSON_UTF8_VALUE )     public ResponseEntity<?> crearCuenta(@Valid @RequestBody Cuenta cta, UriComponentsBuilder ucBuilder) {         logger.info("Creando cuenta : {}", cta);         long ctaId;         		try { 			ctaId = ctaService.create(cta); 			URI location = ServletUriComponentsBuilder.fromCurrentRequest().path( 					"/{id}/datosbasicos").buildAndExpand(ctaId).toUri(); 			return ResponseEntity.created(location).build(); 					} catch (LimiteCuentasException e) { 			 logger.error("Cuenta no creada"); 			 return new ResponseEntity<Object>( 	            		new DefaultErrorList(new DefaultError(ErrorEnum.CTAS_LIMITE_ALCANZADO)), HttpStatus.NOT_FOUND); 		}             }         }

     cuentas-service .. dao CuentasDAO.java 
package mx.isban.formacionplataformadigital.cuentas.dao; import java.util.ArrayList; import java.util.List; import java.util.concurrent.atomic.AtomicLong; import org.springframework.stereotype.Repository; import mx.isban.formacionplataformadigital.cuentas.model.Cuenta; @Repository public class CuentasDAO implements ICuentasDAO{ 	private static final AtomicLong counter = new AtomicLong(); 		private static List<Cuenta> ctas; 		static{ 		ctas = llenarCuentasDummy(); 	} 	    	public Cuenta getPorId(long id) { 		for(Cuenta cta : ctas){ 			if(cta.getId() == id){ 				return cta; 			} 		} 		return null; 	} 	public long create(Cuenta cta) { 		cta.setId(counter.incrementAndGet()); 		ctas.add(cta); 		return cta.getId(); 	} 	public int getCantidadCuentas(){ 		return ctas.size(); 	} 		private static List<Cuenta> llenarCuentasDummy(){ 		List<Cuenta> ctas = new ArrayList<Cuenta>(); 		ctas.add(new Cuenta(1, "12090294110", "CUENTA NOMINA", 1000)); 		ctas.add(new Cuenta(2, "11570293210", "CUENTA NOMINA PREFERENCIAL", 3500)); 		ctas.add(new Cuenta(3, "16090273112", "CUENTA NOMINA PREFERENCIAL", 5000)); 		ctas.add(new Cuenta(4, "18090293114", "CUENTA NOMINA", 2000)); 		return ctas; 	} 	}


     cuentas-service .. dao ICuentasDAO.java 
package mx.isban.formacionplataformadigital.cuentas.dao; import mx.isban.formacionplataformadigital.cuentas.model.Cuenta; public interface ICuentasDAO { 	public Cuenta getPorId(long id); 		public long create(Cuenta prod); 	public int getCantidadCuentas(); }

     cuentas-service .. model Cliente.java 
package mx.isban.formacionplataformadigital.cuentas.model; import java.io.Serializable; import javax.validation.constraints.Min; import javax.validation.constraints.NotNull; import javax.validation.constraints.Pattern; import org.hibernate.validator.constraints.Length; public class Cliente implements Serializable{ 	private static final long serialVersionUID = 1L; 	@NotNull 	private long id; 		@NotNull 	@Length(min=1, max=100) 	@Pattern(regexp = "^[ a-zA-Z]*$") 	private String nombre; 		@NotNull 	@Length(min=1, max=100) 	@Pattern(regexp = "^[ a-zA-Z]*$") 	private String apellido; 		@NotNull 	@Min(value = 0, message = "El valor debe ser positivo") 	private Integer edad; 				public Cliente(){		} 	public Cliente(Cliente cliente){ 		this.id = cliente.getId(); 		this.nombre = cliente.getNombre(); 		this.apellido = cliente.getApellido(); 		this.edad = cliente.getEdad(); 	} 		public Cliente(long id, String nombre, String apellido, Integer edad){ 		this.id = id; 		this.nombre = nombre; 		this.apellido = apellido; 		this.edad = edad; 	} 			public long getId() { 		return id; 	} 	public void setId(long id) { 		this.id = id; 	} 	public String getNombre() { 		return nombre; 	} 	public void setNombre(String nombre) { 		this.nombre = nombre; 	} 	public String getApellido() { 		return apellido; 	} 	public void setApellido(String apellido) { 		this.apellido = apellido; 	} 	public Integer getEdad() { 		return edad; 	} 	public void setEdad(Integer edad) { 		this.edad = edad; 	} 	@Override 	public String toString() { 		return "User [id=" + id + ", nombre=" + nombre + ", apellido=" + apellido 				+ ", edad=" + edad + "]"; 	} }


     cuentas-service .. model Cuenta.java 
package mx.isban.formacionplataformadigital.cuentas.model; import java.io.Serializable; import javax.validation.constraints.Min; import javax.validation.constraints.NotNull; import javax.validation.constraints.Pattern; import org.hibernate.validator.constraints.Length; public class Cuenta implements Serializable{ 	private static final long serialVersionUID = 1L; 	@NotNull 	private long id; 		@NotNull 	@Length(min=1, max=11) 	@Pattern(regexp = "^[0-9]*$") 	private String numero; 		@NotNull 	@Length(min=1, max=100) 	private String descripcion; 		@NotNull 	@Min(value = 0L, message = "El valor debe ser positivo") 	private double saldo; 		public Cuenta(){ 		id=0; 	} 	public Cuenta(Cuenta cuenta){ 		this.id = cuenta.getId(); 		this.numero = cuenta.getNumero(); 		this.descripcion = cuenta.getDescripcion(); 		this.saldo = cuenta.getSaldo(); 	} 		public Cuenta(long id, String numero, String descripcion, double saldo){ 		this.id = id; 		this.numero = numero; 		this.descripcion = descripcion; 		this.saldo = saldo; 	} 		public long getId() { 		return id; 	} 	public void setId(long id) { 		this.id = id; 	} 	public String getNumero() { 		return numero; 	} 	public void setNumero(String numero) { 		this.numero = numero; 	} 	public String getDescripcion() { 		return descripcion; 	} 	public void setDescripcion(String descripcion) { 		this.descripcion = descripcion; 	} 	public double getSaldo() { 		return saldo; 	} 	public void setSaldo(double saldo) { 		this.saldo = saldo; 	} 			@Override 	public String toString() { 		return "User [id=" + id + ", numero=" + numero + ", descripcion=" + descripcion 				+ ", saldo=" + saldo + "]"; 	} }



     cuentas-service .. service ClienteService.java 
  package mx.isban.formacionplataformadigital.cuentas.service; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Service; import org.springframework.web.client.RestTemplate; import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand; import mx.isban.formacionplataformadigital.cuentas.model.Cliente; @Service public class ClienteService implements IClienteService { 	@Autowired 	private RestTemplate restTemplate; 		@Value("${clientes.url}") 	private String clientesUrl; 		@HystrixCommand(fallbackMethod = "getFallbackCliente") 	public Cliente getCliente(long idCliente) { 		Cliente r =  restTemplate.getForObject(clientesUrl + "/clientes/{id}/datosbasicos", 				Cliente.class, idCliente); 		 return r; 	} 	    public Cliente getFallbackCliente(long idCliente ) {     	Cliente cte = new Cliente(); 		return cte; 	} }


     cuentas-service .. service CuentasService.java 
  package mx.isban.formacionplataformadigital.cuentas.service; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import mx.isban.formacionplataformadigital.cuentas.dao.ICuentasDAO; import mx.isban.formacionplataformadigital.cuentas.exception.CuentaNoEncontradaException; import mx.isban.formacionplataformadigital.cuentas.exception.ErrorEnum; import mx.isban.formacionplataformadigital.cuentas.exception.LimiteCuentasException; import mx.isban.formacionplataformadigital.cuentas.model.Cuenta; @Service public class CuentasService implements ICuentasService { 	@Autowired 	private ICuentasDAO ctaDao; 		@Autowired 	private IClienteService ctasClienteService; 	@Override 	public Cuenta getPorId(long id) throws CuentaNoEncontradaException { 		Cuenta cta = ctaDao.getPorId(id); 		if(cta == null){ 			throw new CuentaNoEncontradaException(ErrorEnum.CTAS_NO_ENCONTRADA); 		} 				ctasClienteService.getCliente(1); 		//TODO: realizar logica necesaria para cumplir la funcionalidad de obtencion de cuenta por id 				return cta; 	} 	@Override 	public long create(Cuenta cta) throws LimiteCuentasException { 		//validaciones y reglas de negocio 		if(ctaDao.getCantidadCuentas() > 5){ 			throw new LimiteCuentasException(ErrorEnum.CTAS_LIMITE_ALCANZADO); 		} 				long idCuenta = ctaDao.create(cta); 		//TODO: Bitacorizar transaccion hecha 				return idCuenta; 	} 	}


     cuentas-service .. service IClienteService.java 
  package mx.isban.formacionplataformadigital.cuentas.service; import mx.isban.formacionplataformadigital.cuentas.model.Cliente; public interface IClienteService { 		public Cliente getCliente(long idCliente); 		public Cliente getFallbackCliente(long idCliente ); }


     cuentas-service .. service ICuentasService.java 
  package mx.isban.formacionplataformadigital.cuentas.service; import mx.isban.formacionplataformadigital.cuentas.exception.CuentaNoEncontradaException; import mx.isban.formacionplataformadigital.cuentas.exception.LimiteCuentasException; import mx.isban.formacionplataformadigital.cuentas.model.Cuenta; public interface ICuentasService { 	public Cuenta getPorId(long id)  throws CuentaNoEncontradaException ; 	public long create(Cuenta prod) throws LimiteCuentasException; 	}



  cuentas-service .. cuentas CuentasApplication.java 
  package mx.isban.formacionplataformadigital.cuentas; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.web.servlet.ServletRegistrationBean; import org.springframework.cloud.netflix.hystrix.EnableHystrix; import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard; import org.springframework.cloud.sleuth.sampler.AlwaysSampler; import org.springframework.context.annotation.Bean; import org.springframework.web.client.RestTemplate; import com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet; import springfox.documentation.swagger2.annotations.EnableSwagger2; @SpringBootApplication @EnableSwagger2 @EnableHystrix @EnableHystrixDashboard public class CuentasApplication { 	public static void main(String[] args) { 		SpringApplication.run(CuentasApplication.class, args); 	} 	@Bean 	public RestTemplate restTemplate() { 	    return new RestTemplate(); 	} 		@Bean 	public ServletRegistrationBean hystrixStreamServlet(){ 	    return new ServletRegistrationBean(new HystrixMetricsStreamServlet(), "/hystrix.stream"); 	} 		@Bean 	public AlwaysSampler defaultSampler() { 	  return new AlwaysSampler(); 	} 	}

 cuentas-service src main resources bootstrap.yml 
 spring:   application:     name: cuentas-service   cloud:     config:       #Habilita que valide si existe servicio de configuracion para poder arrancar la aplicacion       failFast: false       retry:       #Intervalo de tiempo inicial entre cada repeticion         initialInterval: 6000       #Incremento exponencial del tiempo de intervalo inicial         multiplier: 1.5       #Tiempo maximo al que puede crecer el intervalo         maxInterval: 30000       enable: true       uri: http://config-service-git-mxpocasw1-dev.appls.cto2.paas.gsnetcloud.corp/       name: ${spring.application.name}       label: master       profile: dev       zipkin:     base-url: http://localhost:8078/   sleuth:     sampler:       percentage: 1.0 #100% de peticiones clientes:   url: http://localhost:8080 server:   port: 8081



 cuentas-service .. cuentas CuentasControllerTest.java 
 package mx.isban.formacionplataformadigital.cuentas; import static org.mockito.Mockito.when; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest; import org.springframework.boot.test.mock.mockito.MockBean; import org.springframework.test.context.junit4.SpringRunner; import org.springframework.test.web.servlet.MockMvc; import mx.isban.formacionplataformadigital.cuentas.model.Cuenta; import mx.isban.formacionplataformadigital.cuentas.service.ICuentasService; @RunWith(SpringRunner.class) @WebMvcTest public class CuentasControllerTest {     @Autowired     private MockMvc mockMvc;     @MockBean     private ICuentasService service;         @Test     public void pruebaConsultaCuentaPorId() throws Exception {     	long id = 1;     	    	when(service.getPorId(id)).thenReturn(new Cuenta(id, "00000000001", "DESCR", 0));     	    	this.mockMvc.perform(get("/cuentas/"+id+"/datosbasicos")).andExpect(status().isOk())         	.andExpect(status().isOk())         	.andExpect(content().contentType("application/json;charset=UTF-8"))     		.andExpect(content().json("{ 'id': " + id + ", 'numero': '00000000001', descripcion: 'DESCR', saldo: 0.0 }"));     	    }     }


 cuentas-service .. cuentas CuentasServiceTest.java 
 package mx.isban.formacionplataformadigital.cuentas; import static org.assertj.core.api.Assertions.assertThat; import static org.mockito.Mockito.when; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.TestConfiguration; import org.springframework.boot.test.mock.mockito.MockBean; import org.springframework.context.annotation.Bean; import org.springframework.test.context.junit4.SpringRunner; import mx.isban.formacionplataformadigital.cuentas.dao.ICuentasDAO; import mx.isban.formacionplataformadigital.cuentas.exception.LimiteCuentasException; import mx.isban.formacionplataformadigital.cuentas.model.Cliente; import mx.isban.formacionplataformadigital.cuentas.model.Cuenta; import mx.isban.formacionplataformadigital.cuentas.service.CuentasService; import mx.isban.formacionplataformadigital.cuentas.service.IClienteService; import mx.isban.formacionplataformadigital.cuentas.service.ICuentasService; @RunWith(SpringRunner.class) public class CuentasServiceTest { 	@TestConfiguration     static class CuentasServiceConfig {         @Bean         public ICuentasService cuentasService() {             return new CuentasService();         }     }         @Autowired     private ICuentasService service;         @MockBean     private ICuentasDAO cuentasDao;         @MockBean 	private IClienteService ctasClienteService;     @Test     public void pruebaGetCuentaPorId() throws Exception {     	//mocking     	long id = 1;     	Cuenta cuentaMock = new Cuenta(id, "00000000001", "DESCR", 0);     	when(cuentasDao.getPorId(id)).thenReturn(cuentaMock);     	when(ctasClienteService.getCliente(1)).thenReturn(new Cliente(id, "NOMBRE", "APELLIDO", 18));     	    	//ejecuta     	Cuenta cta = service.getPorId(id);     	assertThat(cta).isEqualToComparingFieldByField(cuentaMock);     }         @Test(expected = LimiteCuentasException.class)     public void pruebaExcepcionLimiteCuentas() throws Exception {     	//mocking     	int cantidad = 6;     	long id = 1;     	Cuenta cta = new Cuenta(id, "00000000001", "DESCR", 0);     	when(cuentasDao.create(cta)).thenReturn(id);     	when(cuentasDao.getCantidadCuentas()).thenReturn(cantidad);     	    	//ejecuta     	service.create(cta);     	    	    }     }






POM
<?xml version="1.0" encoding="UTF-8"?> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"> 	<modelVersion>4.0.0</modelVersion> 	<groupId>mx.isban.formacionplataformadigital</groupId> 	<artifactId>cuentas-service</artifactId> 	<version>1.0.3-SNAPSHOT</version> 	<packaging>jar</packaging> 	<name>Microservicio de cuentas</name> 	<description>Ejemplo de microservicio apegado a estandares</description> 	<parent> 		<groupId>org.springframework.boot</groupId> 		<artifactId>spring-boot-starter-parent</artifactId> 		<version>1.5.7.RELEASE</version> 		<relativePath /> <!-- lookup parent from repository --> 	</parent> 	<properties> 		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> 		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> 		<maven.compiler.source>1.8</maven.compiler.source> 		<maven.compiler.target>1.8</maven.compiler.target> 		<java.version>1.8</java.version> 	</properties> 	<dependencies> 		<dependency> 			<groupId>org.springframework.boot</groupId> 			<artifactId>spring-boot-starter-web</artifactId> 		</dependency> 								<!-- Librerias habilitadoras de componente Swagger swagger-ui.html --> 		<dependency> 			<groupId>io.springfox</groupId> 			<artifactId>springfox-swagger2</artifactId> 			<version>2.4.0</version> 		</dependency> 		<dependency> 			<groupId>io.springfox</groupId> 			<artifactId>springfox-swagger-ui</artifactId> 			<version>2.4.0</version> 		</dependency> 						<dependency> 			<groupId>org.springframework.boot</groupId> 			<artifactId>spring-boot-starter-test</artifactId> 			<scope>test</scope> 		</dependency> 								<!-- Circuit breaker Hystrix --> 		<dependency> 			<groupId>org.springframework.cloud</groupId> 			<artifactId>spring-cloud-starter-hystrix</artifactId> 		</dependency> 		<dependency> 			<groupId>org.springframework.cloud</groupId> 			<artifactId>spring-cloud-starter-hystrix-dashboard</artifactId> 		</dependency> 						<!-- Librerias para inyeccion de configuracion y fail fast--> 		<dependency> 			<groupId>org.springframework.cloud</groupId> 			<artifactId>spring-cloud-starter-config</artifactId> 		</dependency> 		<dependency>             <groupId>org.springframework.retry</groupId>             <artifactId>spring-retry</artifactId>         </dependency>         <dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-starter-aop</artifactId>        </dependency> 	   	   	           <!-- Para trazabilidad entre microservicios --> 	   <dependency> 		    <groupId>org.springframework.cloud</groupId> 		    <artifactId>spring-cloud-starter-sleuth</artifactId> 		</dependency> 		<dependency> 		  <groupId>org.springframework.cloud</groupId> 		  <artifactId>spring-cloud-sleuth-zipkin</artifactId> 		</dependency>         	</dependencies> 		<dependencyManagement> 		<dependencies> 			<dependency> 				<groupId>org.springframework.cloud</groupId> 				<artifactId>spring-cloud-dependencies</artifactId> 				<version>Dalston.SR3</version> 				<type>pom</type> 				<scope>import</scope> 			</dependency> 		</dependencies> 	</dependencyManagement> 	<build> 		<plugins> 			<plugin> 				<groupId>org.springframework.boot</groupId> 				<artifactId>spring-boot-maven-plugin</artifactId> 			</plugin> 		</plugins> 	</build> 		</project>
























/////////////////////////////////////////////////////////////////////////////////////////
Microservicio basico de consulta de un API interna
     api-consumer-service .. controller ApiConsumerController.java 
     

package mx.isban.formacionplataformadigital.controller; import java.io.IOException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Controller; import org.springframework.validation.FieldError; import org.springframework.web.bind.MethodArgumentNotValidException; import org.springframework.web.bind.annotation.CrossOrigin; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.servlet.NoHandlerFoundException; import mx.isban.formacionplataformadigital.service.ApiConsumerService; @Controller @RequestMapping("/retail_customers") public class ApiConsumerController { 	private Logger logger = LoggerFactory.getLogger(ApiConsumerController.class); 	@Autowired 	private ApiConsumerService apiConsumerService; 	@CrossOrigin 	@RequestMapping(method = RequestMethod.GET, path = "/{customer}", produces = MediaType.APPLICATION_JSON_VALUE) 	public ResponseEntity<String> getRetailCustomerService(@PathVariable("customer") String customer, 			HttpServletRequest req, HttpServletResponse resp) throws IOException { 		String response = ""; 				logger.info("Getting Customer Data: [{}] ", customer); // Buc del cliente 				response = apiConsumerService.getCustomer(customer);// Ejecutamos el servicio de datos basicos 				if(response == null || "".equals(response)){ 			return new ResponseEntity<String>(response, HttpStatus.FORBIDDEN); //En caso de el response este vacio regresamos un error 		}else{ 		logger.info("Response {}", response); 		return new ResponseEntity<String>(response, HttpStatus.OK); //Regresamos el objeto response y un ok 		} 			} 	@ExceptionHandler(NoHandlerFoundException.class) 	public ResponseEntity<String> validationError(MethodArgumentNotValidException e) { 		FieldError fieldError = e.getBindingResult().getFieldError(); 		String error = "Field error in object '" + fieldError.getObjectName() + "' on field '" + fieldError.getField() 				+ "': rejected value [" + fieldError.getRejectedValue() + "]; " + fieldError.getDefaultMessage(); 		logger.warn(error); 		return new ResponseEntity<String>(error, HttpStatus.BAD_REQUEST); 	} }

     api-consumer-service .. interceptors LoggingInterceptor.java  
     

package mx.isban.formacionplataformadigital.interceptors; import java.io.IOException; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import okhttp3.Interceptor; import okhttp3.Request; import okhttp3.Response; public class LoggingInterceptor implements Interceptor { 	private Logger logger = LoggerFactory.getLogger(LoggingInterceptor.class); 	@Override 	public Response intercept(Interceptor.Chain chain) throws IOException { 		Request request = chain.request(); 		long t1 = System.nanoTime(); 		logger.info("Sending request {} on {}{}", request.url(), chain.connection(), request.headers()); 		Response response = chain.proceed(request); 		long t2 = System.nanoTime(); 		logger.info("Received response for {} in {}{}", response.request().url(), (t2 - t1) / 1e6d, response.headers()); 		return response; 	} }

     api-consumer-service .. model AccessTokenDTO.java 
     

package mx.isban.formacionplataformadigital.model; import com.fasterxml.jackson.annotation.JsonProperty; public class AccessTokenDTO { 	@JsonProperty("token_type") 	private String tokenType; 	@JsonProperty("access_token") 	private String accessToken; 	@JsonProperty("expires_in") 	private int expiresIn; 	@JsonProperty("scope") 	private String scope; 	public String getTokenType() { 		return tokenType; 	} 	public void setTokenType(String tokenType) { 		this.tokenType = tokenType; 	} 	public String getAccessToken() { 		return accessToken; 	} 	public void setAccessToken(String accessToken) { 		this.accessToken = accessToken; 	} 	public int getExpiresIn() { 		return expiresIn; 	} 	public void setExpiresIn(int expiresIn) { 		this.expiresIn = expiresIn; 	} 	public String getScope() { 		return scope; 	} 	public void setScope(String scope) { 		this.scope = scope; 	} 	@Override 	public String toString() { 		return "AccessToken [tokenType=" + tokenType + ", accessToken=" + accessToken + ", expiresIn=" + expiresIn 				+ ", scrope=" + scope + "]"; 	} }


     api-consumer-service .. model CustomerDTO.java 
package mx.isban.formacionplataformadigital.model; public class CustomerDTO { 	private String customerId; 	private String name; 	private String paternalName; 	private String maternalName; 	private String maritalStat; 	private String  gender; 	private String businessActivity; 	private String immigrationStat; }



     api-consumer-service .. model AccessTokenDTO.java 
     

package mx.isban.formacionplataformadigital.model; import com.fasterxml.jackson.annotation.JsonProperty; public class AccessTokenDTO { 	@JsonProperty("token_type") 	private String tokenType; 	@JsonProperty("access_token") 	private String accessToken; 	@JsonProperty("expires_in") 	private int expiresIn; 	@JsonProperty("scope") 	private String scope; 	public String getTokenType() { 		return tokenType; 	} 	public void setTokenType(String tokenType) { 		this.tokenType = tokenType; 	} 	public String getAccessToken() { 		return accessToken; 	} 	public void setAccessToken(String accessToken) { 		this.accessToken = accessToken; 	} 	public int getExpiresIn() { 		return expiresIn; 	} 	public void setExpiresIn(int expiresIn) { 		this.expiresIn = expiresIn; 	} 	public String getScope() { 		return scope; 	} 	public void setScope(String scope) { 		this.scope = scope; 	} 	@Override 	public String toString() { 		return "AccessToken [tokenType=" + tokenType + ", accessToken=" + accessToken + ", expiresIn=" + expiresIn 				+ ", scrope=" + scope + "]"; 	} }


     api-consumer-service .. model CustomerDTO.java 
     

package mx.isban.formacionplataformadigital.model; public class CustomerDTO { 	private String customerId; 	private String name; 	private String paternalName; 	private String maternalName; 	private String maritalStat; 	private String  gender; 	private String businessActivity; 	private String immigrationStat; }



     api-consumer-service .. service ApiConsumerService.java 
     

package mx.isban.formacionplataformadigital.service; import java.io.IOException; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Service; import org.springframework.util.LinkedMultiValueMap; import org.springframework.util.MultiValueMap; import org.springframework.web.client.RestClientException; import org.springframework.web.client.RestTemplate; import mx.isban.formacionplataformadigital.ConnectionUtil; import mx.isban.formacionplataformadigital.model.AccessTokenDTO; import okhttp3.OkHttpClient; import okhttp3.Request; import okhttp3.Response; @Service public class ApiConsumerService { 	private Logger logger = LoggerFactory.getLogger(ApiConsumerService.class); 	@Autowired 	private RestTemplate restTemplate; 	@Autowired 	private ConnectionUtil connectionUtil; 	@Value("${url.val.aut}") 	private String urlValUsuario; 	@Value("${url.val.login}") 	private String urlLoginPortal; 	@Value("${apiaccess.url.accesstoken}") 	private String baseUrlToken; 		@Value("${apiaccess.url.services}") 	private String baseUrlServices; 		@Value("${apiaccess.credentials.clientid}") 	private String clientId; 		@Value("${apiaccess.credentials.clientsecret}") 	private String clientSecret; 		@Value("${apiaccess.credentials.granttye}") 	private String grantType; 		@Value("${apiaccess.credentials.scope}") 	private String scope; 	@Value("${apiaccess.credentials.tokenCorp}") 	private String tokenCorp; 		/** 	 * Metodo para la obtencion de datos basicos del cliente 	 * @param customerId Buc del cliente 	 * @return response con los datos basicos del cliente 	 * @throws IOException excepcion IO 	 */ 	public String getCustomer(String customerId) throws IOException { 		logger.debug("Getting Customer Data {}", customerId); 		ResponseEntity<AccessTokenDTO> token = callGetToken(); 				if(token == null) { 			return null; 		} 				String tokenBearer = "Bearer " + token.getBody().getAccessToken(); 		logger.debug("Token Bearer [{}]", tokenBearer); 		OkHttpClient client = connectionUtil.getUnsafeOkHttpClient(); 		Request request = new Request.Builder().url(baseUrlServices + "retail_customers/" + customerId) 				.get() 				.header("accept-language", "es-ES") 				.header("x-ibm-client-id", clientId) 				.header("authorization", tokenBearer) 				.addHeader("x-santander-global-id", "123456") 				.header("content-type", "application/json") 				.build(); 		Response response = client.newCall(request).execute(); 		return response.body().string(); 	} 	/** 	 * Metodo que genera access_token 	 * @return access_token 	 */ 	public ResponseEntity<AccessTokenDTO> callGetToken() { 		logger.info("Getting Access Token"); 		HttpHeaders headers = new HttpHeaders(); 		headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED); 		MultiValueMap<String, String> mapa = new LinkedMultiValueMap<String, String>();//Se crea mapa para guardar valores del body para peticion de access_token 		mapa.add("scope", scope); 		mapa.add("grant_type", grantType); 		mapa.add("token",tokenCorp); 		mapa.add("client_id", clientId); 		mapa.add("client_secret", clientSecret); 		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(mapa, 				headers);// Se le pasan los valores del mapa y las headers 		logger.debug("Calling URL: {}", baseUrlToken + "get_token"); 		ResponseEntity<AccessTokenDTO> exchange = null; 		try { 			exchange = restTemplate.exchange(baseUrlToken + "get_token", HttpMethod.POST, 					request, AccessTokenDTO.class);//Se ejecuta peticion hacia la api para obtencion de access_token 			logger.info("Info: [{}]", exchange); 			logger.info("Info: [{}]", exchange.getBody()); 			logger.info("Info: [{}]", exchange.getHeaders()); 					}catch(RestClientException rce) { 			logger.error("Error calling rest interface", rce); 		} 		return exchange; 	} }

     api-consumer-service .. formacionplataformadigital ApiConsumerServiceApplication.java 
     

package mx.isban.formacionplataformadigital; import java.security.KeyManagementException; import java.security.KeyStoreException; import java.security.NoSuchAlgorithmException; import java.security.cert.X509Certificate; import javax.net.ssl.SSLContext; import org.apache.http.conn.ssl.SSLConnectionSocketFactory; import org.apache.http.impl.client.CloseableHttpClient; import org.apache.http.impl.client.HttpClients; import org.apache.http.ssl.TrustStrategy; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration; import org.springframework.boot.web.client.RestTemplateBuilder; import org.springframework.context.annotation.Bean; import org.springframework.http.client.HttpComponentsClientHttpRequestFactory; import org.springframework.web.client.RestTemplate; @SpringBootApplication @EnableAutoConfiguration(exclude = {ErrorMvcAutoConfiguration.class}) public class ApiConsumerServiceApplication { 		@Bean 	public RestTemplate restTemplate(RestTemplateBuilder builder) throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException { 				TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -> true; 		SSLContext sslContext = org.apache.http.ssl.SSLContexts.custom() 		        .loadTrustMaterial(null, acceptingTrustStrategy) 		        .build(); 		SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext, SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER); 		CloseableHttpClient httpClient = HttpClients.custom() 		        .setSSLSocketFactory(csf) 		        .build(); 		HttpComponentsClientHttpRequestFactory requestFactory = 		        new HttpComponentsClientHttpRequestFactory(); 		requestFactory.setHttpClient(httpClient); 		RestTemplate restTemplate = new RestTemplate(requestFactory); 						return restTemplate; 	} 		@Bean 	public ConnectionUtil connectionUtil() { 		return new ConnectionUtil(); 	} 	public static void main(String[] args) { 		SpringApplication.run(ApiConsumerServiceApplication.class, args); 	} }


     api-consumer-service .. formacionplataformadigital ConnectionUtil.java 
     

package mx.isban.formacionplataformadigital; import java.util.concurrent.TimeUnit; import javax.net.ssl.HostnameVerifier; import javax.net.ssl.SSLContext; import javax.net.ssl.SSLSession; import javax.net.ssl.SSLSocketFactory; import javax.net.ssl.TrustManager; import javax.net.ssl.X509TrustManager; import mx.isban.formacionplataformadigital.interceptors.LoggingInterceptor; import okhttp3.OkHttpClient; public class ConnectionUtil { 	public OkHttpClient getUnsafeOkHttpClient() { 		try { 			// Create a trust manager that does not validate certificate chains 			final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() { 				@Override 				public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) { 				} 				@Override 				public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) { 				} 				@Override 				public java.security.cert.X509Certificate[] getAcceptedIssuers() { 					return new java.security.cert.X509Certificate[] {}; 				} 			} }; 			// Install the all-trusting trust manager 			final SSLContext sslContext = SSLContext.getInstance("SSL"); 			sslContext.init(null, trustAllCerts, new java.security.SecureRandom()); 			// Create an ssl socket factory with our all-trusting manager 			final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory(); 			OkHttpClient.Builder builder = new OkHttpClient.Builder(); 			builder.sslSocketFactory(sslSocketFactory, (X509TrustManager) trustAllCerts[0]); 			builder.hostnameVerifier(new HostnameVerifier() { 				@Override 				public boolean verify(String hostname, SSLSession session) { 					return true; 				} 			}); 			OkHttpClient okHttpClient = builder.connectTimeout(15, TimeUnit.SECONDS).writeTimeout(15, TimeUnit.SECONDS) 					.readTimeout(15, TimeUnit.SECONDS).addNetworkInterceptor(new LoggingInterceptor()).build(); 			return okHttpClient; 		} catch (Exception e) { 			throw new RuntimeException(e); 		} 	} }


     api-consumer-service src main resources bootstrap.yml 
     

url:   val:     aut: http://mejico.isban.pre.corp/POLBAN_S_ENS/BtoChannelDriver.ssobto?dse_operationName=validaUsuario&token=%s&entrada.appID=%s&entrada.output=JSON     login: https://portales.pre.mx.corp/SSOSantMexIntraTokenAS/BtoChannelDriver.ssobto?dse_operationName=SSOCorpOpP&dse_parentContextName=&dse_processorState=initial&dse_nextEventName=start&URLTarget=http://consumer-front-mxapiman1-dev.appls.cto1.paas.gsnetcloud.corp   front: https://apiconsumer-front-https-mxapiman1-pre.appls.cto1.paas.gsnetcloud.corp apiaccess:   credentials:     clientid: 23041381-ceee-45d0-8325-31efc4a75fd1     clientsecret: gQ7eQ3xQ7eX8iF2hC5pY2wG0wU7yO1sR8eY0jV8iD0yV7aP2oR     granttye: password     scope: corporate_tables.read corporate_accounts.read corporate_cards.read corporate_customers.read customers.read customers_data.read retail_accounts.read retail_cards.read retail_customers.read audit.write     tokenCorp: QjRCNTZGMkUwOEY0NUQwMzk3QzJEQUM4IzE4MC4xODEuMTE5LjUjMTUwNTc4NjU0OTg0MSNQRDk0Yld3Z2RtVnljMmx2YmowaU1TNHdJaUJsYm1OdlpHbHVaejBpU1ZOUExUZzROVGt0TVNJL1BqeDBiMnRsYmtSbFptbHVhWFJwYjI0K1BHNWhiV1UrVmtGVFEwOU9RMFZNVDFNZ1IwOU9Xa0ZNUlZvc1JFbEZSMDg4TDI1aGJXVStQR0ZzYVdGelBtNDRORFl3TWpJOEwyRnNhV0Z6UGp4MWMyVnlTVVErYmpnME5qQXlNand2ZFhObGNrbEVQand2ZEc5clpXNUVaV1pwYm1sMGFXOXVQZz09I0RFU2VkZS9DQkMvUEtDUzVQYWRkaW5nI3YxI01leGljb0ludHJhbmV0I05PVF9VU0VEI1NIQTF3aXRoUlNBI0hpc3ZKempaMG80dVpWcWZiM0lSWWcxRXlmWDRiN2Z3YnB4akwxdnhJTkNmdmVMZ3lPQk1tMXNVcE5obGRUUnZvNHVKZE5zU3VCU3JTakpVNTEwUHZUMkVQRzdRTkN0eXc5bFppSUZnZUtnMDIvSzVQMlozdjR6V2llemxqSkxjbmtHSW9OT25EMzBzRnZkVnVnSXNSTmFKU3Nuc0pjRmo1NVBYVVMvODJzbUdOVzNwTUZQdDhwWDE4cnh0bE1obU82SUo5d2NsTVpyU251RnNNVm9qb0N1cTc5clJLUzFSd051bXl3eFIwWExMOGZIQ092UWlhN2R5Q2JaVjVzREZsckRKa0pCSWp0U3R3d0Q5Ym92Um9kT0NMQmN1ekJxRk9nb2pBN1pnZlRkRGxDbmgrK09VQmx0eGRVeWM2ZFNVK2wzVHpGNndSdXZwV09zbHlJUUdKQT09   url:     accesstoken: https://api.santander.pre.mx.corp:8050/santander-mexico/intranet-client-pre/     services: https://api.santander.pre.mx.corp/santander-mexico/intranet-client-pre/ security:   ignored: /public/*, /swagger-ui.html, /webjars/**, /swagger-resources, /v2/api-docs, /configuration/ui, /configuration/security, /health


     api-consumer-service src main resources log4j2.xml 
     

<?xml version="1.0" encoding="UTF-8"?> <Configuration status="WARN" monitorInterval="30">     <Properties>         <Property name="PID">????</Property>         <Property name="LOG_PATTERN">%X{camel.messageId} %clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint}%clr{ %5p} %clr{${sys:PID}}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %X{agaveLog} %m%n%wEx </Property>     </Properties>     <Appenders>         <Console name="Console" target="SYSTEM_OUT" follow="true">             <PatternLayout pattern="${LOG_PATTERN}"/>         </Console>     </Appenders>     <Loggers>         <Logger name="mx.isban.digital" level="DEBUG" />         <Root level="INFO">             <AppenderRef ref="Console"/>         </Root>     </Loggers> </Configuration>



     


https://juliomunoz.wordpress.com/2014/12/10/probando-spring-netflix-parte-1-spring-cloud-config-server/


http://enmilocalfunciona.io/arquitectura-de-microservicios-parte-3/
